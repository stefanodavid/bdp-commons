pipeline {
    agent {
        dockerfile {
            filename 'docker/dockerfile-java'
            additionalBuildArgs '--build-arg JENKINS_USER_ID=`id -u jenkins` --build-arg JENKINS_GROUP_ID=`id -g jenkins`'
        }
    }
    
    environment {
        TESTSERVER_TOMCAT_ENDPOINT=credentials('testserver-tomcat8-url')
        TESTSERVER_TOMCAT_CREDENTIALS=credentials('testserver-tomcat8-credentials')
        PROJECT = "airquality-appabz"
        PROJECT_FOLDER = "data-collectors/${PROJECT}"
        LOG_FOLDER = "/var/log/opendatahub/data-collectors"
        ARTIFACT_NAME = "dc-${PROJECT}"
        FTP_KEYFILE = credentials('bdp-airquality-datacollector-appabz-sftp-key-testserver')
		FTP_KNOWN_HOSTS = credentials('bdp-airquality-datacollector-appabz-sftp-knownhosts')
		FTP_PASS = credentials('bdp-airquality-datacollector-appabz-sftp-passphrase-testserver')
		SSH_FOLDER = "${PROJECT_FOLDER}/src/main/resources/META-INF/.ssh"
    }

    stages {
        stage('Configure') {
            steps {
                sh 'sed -i -e "s/<\\/settings>$//g\" ~/.m2/settings.xml'
                sh 'echo "    <servers>" >> ~/.m2/settings.xml'
                sh 'echo "        ${TESTSERVER_TOMCAT_CREDENTIALS}" >> ~/.m2/settings.xml'
                sh 'echo "    </servers>" >> ~/.m2/settings.xml'
                sh 'echo "</settings>" >> ~/.m2/settings.xml'

                sh 'sed -i -e "s%\\(property.logFileFolder\\s*=\\).*\\$%\\1${LOG_FOLDER}%" ${PROJECT_FOLDER}/src/main/resources/log4j2.properties'
                sh 'sed -i -e "s%\\(property.logFileName\\s*=\\).*\\$%\\1${ARTIFACT_NAME}%" ${PROJECT_FOLDER}/src/main/resources/log4j2.properties'
                sh 'sed -i -e "s%\\(property.rootlevel\\s*=\\).*\\$%\\1DEBUG%" ${PROJECT_FOLDER}/src/main/resources/log4j2.properties'

				/*
                 * Check if the ssh folder exists, create one if not and put needed files with correct permissions
                 */
				sh '''
					mkdir -p "${SSH_FOLDER}"
					rm -f "${SSH_FOLDER}/id_rsa_sftp" "${SSH_FOLDER}/known_hosts"
					cp "${FTP_KEYFILE}" "${SSH_FOLDER}/id_rsa_sftp"
					cp "${FTP_KNOWN_HOSTS}" "${SSH_FOLDER}/known_hosts"
					chmod 400 "${SSH_FOLDER}/id_rsa_sftp"
					chmod 644 "${SSH_FOLDER}/known_hosts"
					'''

				/*
				 * Configure application.properties and inject the correct pass-phrase for the test server.
				 * Security: set +x turns echoing off (otherwise password would be printed to logs)
				 */
				sh '''
					set +x
					export PASSX="$(echo ${FTP_PASS} | sed -e "s/[\\\\/&]/\\\\\\\\&/g")"
					sed -ie '/ftp\\.pass=/ s/=.*/='$PASSX'/' ${PROJECT_FOLDER}/src/main/resources/META-INF/spring/application.properties
					set -x
					'''
            }
        }

        stage('Test') {
            steps {
                sh 'cd ${PROJECT_FOLDER} && mvn -B -U clean test verify'
            }
        }

	    stage('Deploy') {
            steps {
                sh 'cd ${PROJECT_FOLDER} && mvn -B -U tomcat:redeploy -Dmaven.tomcat.url=${TESTSERVER_TOMCAT_ENDPOINT} -Dmaven.tomcat.server=testServer'
            }
        }
    }
}
